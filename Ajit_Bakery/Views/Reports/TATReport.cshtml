@model IEnumerable<Ajit_Bakery.Models.TATReport>
@{
    var outlets = ViewBag.AllOutlets as List<string>; // Get dynamic outlet names
    string lastProductionId = ""; // Track last Production Id for grouping
}



@{
    ViewData["Title"] = "Index";
}

<div class="card">
    <div class="card-header bg-dark text-white py-2">
        <div class="d-flex align-items-baseline">
            <a asp-action="Index" asp-controller="Home" class="btn btn-link text-white"><i class="fa fa-arrow-left"></i></a>
            <h4 class="mx-auto text-white text-2xl font-semibold"> TAT Report </h4>

        </div>
    </div>
    <div class="card-body mt-4">
        <div class="table table-responsive">
            <table id="ProductionCapture" class="table table-striped table-bordered" style="width:100%">
                <thead class="thead-light">
                    <tr class="text-center small">
                        <th class="text-center">Outlet Name</th>
                        <th class="text-center">Production Id</th>
                        <th class="text-center">Item Name</th>
                        <th class="text-center">Total Net Wt.</th>
                        <th class="text-center">Order Dt.Tm</th>
                        <th class="text-center">Production Dt.Tm</th>
                        <th class="text-center">Packaging Dt.Tm</th>
                        <th class="text-center">Transfer Dt.Tm</th>
                        <th class="text-center">Dispatch Dt.Tm</th>
                    </tr>
                </thead>
                <tbody class="small text-center">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td class="text-center">@item.outlet</td>
                            <td class="text-center">@item.ProductionId</td>
                            <td class="text-center">@item.productname</td>
                            <td class="text-center">@item.totalnetwg</td>
                            <td class="text-center">@item.order_date</td>
                            <td class="text-center">@item.production_date</td>
                            <td class="text-center">@item.packaging_date</td>
                            <td class="text-center">@item.transfer_date</td>
                            <td class="text-center">@item.dispatch_date</td>
                        </tr>
                    }
                </tbody>
            </table>





        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    
    <script>
        $(document).ready(function () {
            var table = $('#ProductionCapture').DataTable({
                dom: 'Bfrtip',
                autoWidth: true,
                buttons: [
                    {
                        extend: 'excel',
                        title: 'Production Planning Report',
                        filename: function () {
                            return generateFilename('Production_Planning_Report');
                        },
                        text: '<i class="fas fa-file-excel"></i> Export Excel',
                        className: 'dt-button btn btn-success',
                        exportOptions: {
                            columns: ':not(.noExport)',
                            format: {
                                body: function (data, row, column) {
                                    // Prevent empty merged cells in export
                                    return data.trim() === "" ? null : data;
                                }
                            }
                        },
                        customize: function (xlsx) {
                            var sheet = xlsx.xl.worksheets['sheet1.xml'];
                            var styles = xlsx.xl['styles.xml'];

                            // Define a new style for center alignment
                            var newStyle = '<xf numFmtId="0" fontId="0" fillId="0" borderId="0" applyAlignment="1"><alignment horizontal="center"/></xf>';

                            // Insert new style into styles.xml
                            var lastStyleIndex = $('cellXfs xf', styles).length; // Get the last style index
                            $('cellXfs', styles).append(newStyle);

                            // Apply the new center-aligned style to all columns
                            $('row c', sheet).attr('s', lastStyleIndex);

                            // Apply bold style to the first row (header row)
                            // $('row:first c', sheet).attr('s', boldStyleIndex);
                        }
                    },

                    {
                        extend: 'pdf',
                        title: 'Production Planning Report',
                        filename: function () {
                            return generateFilename('Production_Planning_Report');
                        },
                        text: '<i class="fas fa-file-pdf"></i> Export PDF',
                        className: 'dt-button btn btn-danger',
                        pageSize: 'A4',
                        orientation: 'landscape',
                        exportOptions: {
                            columns: ':not(.noExport)',
                            format: {
                                body: function (data, row, column) {
                                    return data.trim() === "" ? null : data;
                                }
                            }
                        },
                        customize: function (doc) {
                            doc.styles.title = {
                                fontSize: 16,
                                bold: true,
                                alignment: 'center'
                            };
                            let tableBody = doc.content[1].table.body;
                            doc.content[1].table.widths = Array(tableBody[0].length + 1).join('*').split('');
                            // Define columns to exclude from centering (0-based index)
                            let excludeColumns = [1]; // Adjust as needed

                            // Apply center alignment to all except excluded columns
                            tableBody.forEach(function (row) {
                                row.forEach(function (cell, colIndex) {
                                    if (!excludeColumns.includes(colIndex)) {
                                        cell.alignment = 'center';
                                    }
                                });
                            });
                        }

                    }
                ],
                info: true,
                ordering: false, // Keep ordering disabled to maintain grouping
                paging: true,
                searching: true,
            });

            // Simulate merging of Production Order ID column (hide duplicates)
            var prev = null;
            $("#ProductionCapture tbody tr").each(function () {
                var current = $(this).find("td.production-id").text().trim();
                if (current === prev) {
                    $(this).find("td.production-id").text("").addClass("hidden"); // Hide duplicate
                } else {
                    prev = current;
                }
            });
        });

        function generateFilename(baseName) {
            const now = new Date();
            const date = now.toISOString().slice(0, 10).replace(/-/g, '_');
            return `${baseName}_${date}`;
        }
    </script>


    <script>

        // document.querySelectorAll(".delete-btn").forEach(button => {
        //     button.addEventListener("click", function () {
        //         let productId = this.getAttribute("data-id");
        //         Swal.fire({
        //             title: "Are you sure?",
        //             text: "You won't be able to revert this!",
        //             icon: "warning",
        //             showCancelButton: true,
        //             confirmButtonColor: "#d33",
        //             cancelButtonColor: "#3085d6",
        //             confirmButtonText: "Yes, delete it!"
        //         }).then((result) => {
        //             if (result.isConfirmed) {
        //                 $.ajax({
        //                     url: "@Url.Action("Delete", "ProductionCaptures")", // Replace with your controller name
        //                     data: { id: productId },
        //                     type: "GET",
        //                     success: function (response) {
        //                         Swal.fire({
        //                             title: "Deleted!",
        //                             text: response.message,
        //                             icon: "success",
        //                             timer: 1500,
        //                             showConfirmButton: false
        //                         });

        //                         // Remove the deleted row from the table
        //                         $("a[data-id='" + productId + "']").closest("tr").remove();
        //                     },
        //                     error: function () {
        //                         Swal.fire({
        //                             title: "Error!",
        //                             text: "Something went wrong. Try again!",
        //                             icon: "error"
        //                         });
        //                     }
        //                 });
        //             }
        //         ],
        //         // info: false,  ordering: false,
        //     });
        // });


    </script>
}


